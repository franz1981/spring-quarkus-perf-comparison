name: spring-quarkus-perf-comparison
states:
  env.USER: someuser
  env.HOST: 127.0.0.1
  env.TARGET: ${{env.USER}}@${{env.HOST}}

  config.jvm.version: 25-tem
  config.jvm.graalvm.version: 25-graalce

  config.quarkus.version: #3.28.3
  config.springboot.version: #3.5.6

  config.jvm.memory: #-Xmx128m
  config.jvm.args:
  config.CMD_PREFIX: #taskset --cpu-list 0-3

  config.quarkus.native_build_options: #-Dquarkus.native.native-image-xmx=<maximum_memory>
  config.springboot.native_build_options:

  config.cgroup.cpu: "0,2,4,6,8,10,12,14"
  config.cgroup.mem_max: "14G"
  config.cgroup.name: spring-quarkus-perf-comparison

  config.profiler.name: none #jfr flamegraph
  config.profiler.events: cpu

  config.repo.branch: main
  config.repo.url: https://github.com/quarkusio/spring-quarkus-perf-comparison.git

  config.num_iterations: 3

  RUN.WRK_BIN: jbang wrk@hyperfoil

  DROP_OS_FILESYSTEM_CACHES:
  QUARKUS_MAVEN_OPTIONS:
  PAUSE_TIME: 5
  PROFILER_JVM_ARGS:
  BASE_JAVA_CMD: ${{config.CMD_PREFIX}} java ${{config.jvm.memory}} ${{config.jvm.args}} ${{PROFILER_JVM_ARGS}}
  TESTS : [test-build, measure-build-times, measure-time-to-first-request, measure-rss, run-load-test]
  RUNTIMES: [quarkus3-jvm, quarkus3-native, spring3-jvm, spring3-jvm-aot, spring3-native]

  RUNTIMECMDS: {
    "quarkus3-jvm": {
      "name": "quarkus3-jvm"
      , type: "jvm"
      , updateScript: "update-quarkus-version"
      , updateVersion: "${{config.quarkus.version}}"
      , dir: "${{QUARKUS3_DIR}}"
      , buildCmd: "./mvnw ${{QUARKUS_MAVEN_OPTIONS}} clean package -DskipTests"
      , "runCmd" : "${{BASE_JAVA_CMD}} -jar ${{QUARKUS3_DIR}}/target/quarkus-app/quarkus-run.jar"
      },
    "quarkus3-native": {
      "name": "quarkus3-native"
      , type: "native"
      , updateScript: "update-quarkus-version"
      , updateVersion: "${{config.quarkus.version}}"
      ,  dir: "${{QUARKUS3_DIR}}"
      , buildCmd: "./mvnw ${{QUARKUS_MAVEN_OPTIONS}} clean package -DskipTests -Pnative ${{config.quarkus.native_build_options}}"
      , "runCmd" : "${{config.CMD_PREFIX}} ${{QUARKUS3_DIR}}/target/quarkus3-runner ${{config.jvm.memory}}"
      },
    "spring3-jvm" : {
      "name": "spring3-jvm"
      , type: "jvm"
      , updateScript: "update-spring-boot-version"
      , updateVersion: "${{config.springboot.version}}"
      , dir: "${{SPRING3_BOOT_DIR}}"
      , buildCmd: "./mvnw clean package -DskipTests"
      , "runCmd" : "${{BASE_JAVA_CMD}} -jar ${{SPRING3_BOOT_DIR}}/target/springboot3.jar"
      },
    "spring3-jvm-aot" : {
      "name": "spring3-jvm-aot"
      , type: "jvm"
      , updateScript: "update-spring-boot-version"
      , updateVersion: "${{config.springboot.version}}"
      , dir: "${{SPRING3_BOOT_DIR}}"
      , buildCmd: "./mvnw clean compile spring-boot:process-aot package -DskipTests"
      , "runCmd" : "${{BASE_JAVA_CMD}} -Dspring.aot.enabled=true -jar ${{SPRING3_BOOT_DIR}}/target/springboot3.jar"
      },
    "spring3-native" : {
      "name": "spring3-native"
      , type: "native"
      , updateScript: "update-spring-boot-version"
      , updateVersion: "${{config.springboot.version}}"
      , dir: "${{SPRING3_BOOT_DIR}}"
      , buildCmd: "./mvnw clean -Pnative -DskipTests native:compile package ${{config.springboot.native_build_options}}"
      , "runCmd" : "${{config.CMD_PREFIX}} ${{SPRING3_BOOT_DIR}}/target/springboot3 ${{config.jvm.memory}}"
      }
  }

  REPO_DIR: ${{BASE_DIR}}/spring-quarkus-perf-comparison
  SCRIPTS_DIR: ${{REPO_DIR}}/${{PROJ_REPO_NAME}}/benchmarks/scripts
  SPRING3_BOOT_DIR: ${{REPO_DIR}}/${{PROJ_REPO_NAME}}/springboot3
  QUARKUS3_DIR : ${{REPO_DIR}}/${{PROJ_REPO_NAME}}/quarkus3
  TARGET_URL: http://localhost:8080/fruits
  QUARKUS-PLATFORM-ARTIFACT-ID: quarkus-bom
  PROJ_REPO_NAME: spring-quarkus-perf-comparison
  BASE_DIR: "~"
  METRICS_DIR: /tmp
  ASYNC_PROFILER: async-profiler
  ASYNC_PROFILER_DIR: ${{BASE_DIR}}/${{ASYNC_PROFILER}}

scripts:
  output-vars:
    - log: |
        "Config: ${{config}}"
        "ENV: ${{env}}"
        "BASE_DIR: ${{BASE_DIR}}"
        "REPO_DIR: ${{REPO_DIR}}"
        "SCRIPTS_DIR: ${{SCRIPTS_DIR}}"
        "SPRING3_BOOT_DIR: ${{SPRING3_BOOT_DIR}}"
        "QUARKUS3_DIR : ${{QUARKUS3_DIR }}"

  cleanup-env:
    - script: sudo
      with:
        command: rm -Rf ${{REPO_DIR}}/${{PROJ_REPO_NAME}}

  config-env:
    - script: sudo
      with:
        command: rm -Rf ${{REPO_DIR}}/logs
    - sh: mkdir -p ${{REPO_DIR}}/logs

  clone-repo:
    - script: sudo
      with:
        command: rm -Rf ${{REPO_DIR}}
    - sh: mkdir -p ${{REPO_DIR}}/logs
    - sh: cd ${{REPO_DIR}}
    - log: Cloning project repo ${{config.repo.branch}}@${{config.repo.url}}
    - sh: git clone -b ${{config.repo.branch}} ${{config.repo.url}}
    - sh: cd ${{PROJ_REPO_NAME}}
    - log: Checked out repo
    - sh: git remote get-url origin
    - sh: git branch --show-current
    - sh: cd ${{SCRIPTS_DIR}}
    - sh: npm install axios@0.27.2

  update-spring-boot-version:
    - script: check-dependency-exists
      with:
        groupId: org.springframework.boot
        artifactId: spring-boot-starter-parent
        version: ${{VERSION}}
    - sh: ./mvnw versions:update-parent "-DparentVersion=[${{VERSION}}]" -DskipResolution=true

  update-quarkus-version:
    - script: check-dependency-exists
      with:
        groupId: io.quarkus.platform
        artifactId: quarkus-bom
        version: ${{VERSION}}
    - sh: ./mvnw versions:set-property -Dproperty=quarkus.platform.version -DnewVersion=${{VERSION}}

  start-test-services:
    - sh: cd ${{REPO_DIR}}/${{PROJ_REPO_NAME}}
    - sh: scripts/infra.sh -s

  stop-test-services:
    - sh: cd ${{REPO_DIR}}/${{PROJ_REPO_NAME}}
    - sh: scripts/infra.sh -d

  run-tests:
    - sh: java -version
    - sh: echo $$
    - set-state: RUN.SHELL_PID
    - signal: CGROUP_${{config.cgroup.name}}_SET
    - log: waiting for cgroups to be configured
    - wait-for: CGROUP_${{config.cgroup.name}}_DONE
    - log: cgroups configured - continuing
    - for-each: RUNTIME ${{RUNTIMES}}
      then:
        - log: "Updating version: ${{${{RUNTIMECMDS.${{RUNTIME}}}}.updateVersion:}}"
        - script: ${{${{RUNTIMECMDS.${{RUNTIME}}}}.updateScript:abort-script-not-found}}
          with:
            DIR: ${{${{RUNTIMECMDS.${{RUNTIME}}}}.dir}}
            VERSION: ${{${{RUNTIMECMDS.${{RUNTIME}}}}.updateVersion:}}
        - log: "Testing: ${{RUNTIME}}"
        - for-each: TEST ${{TESTS}}
          then:
          - script: ${{TEST}}
            with:
              RUNTIME: ${{RUNTIMECMDS.${{RUNTIME}}}}
    - script: download-metrics

  abort-script-not-found:
    - abort: script not found

  test-build:
    - log: Test Build - ${{RUNTIME.name}}
    - sh: cd ${{RUNTIME.dir}}
    - sh: java -version
    - sh: ${{RUNTIME.buildCmd}}
      watch:
      - regex: BUILD FAILURE
        then:
          - abort: failed to build ${{RUNTIME.name}}

  measure-build-times:
    - log: Build times
    - sh: cd ${{RUNTIME.dir}}
    - log: JVM version
    - sh: java -version
    - log: Graal VM Version
    - sh: $GRAALVM_HOME/bin/java -version
    - set-state: TYPE ${{RUNTIME.type}}
    - for-each: ITERATION ${{=[...Array(${{config.num_iterations}}).keys()]}}
      then:
        - script: sync-drop-fs-cache
        - sh: /usr/bin/time -p ${{RUNTIME.buildCmd}} 2>&1 >${{REPO_DIR}}/logs/build-times-${{RUNTIME.name}}-${{ITERATION}}.log | grep real | awk '{print $2}'
        - set-state: BUILD_TIME
        - script: state-array-push
          with:
            array: RUN.output.results.${{RUNTIME.name}}.build.timings
            value: ${{BUILD_TIME}}

        # If its a native build, gather the native build rss as well
        - read-state: ${{TYPE}}
          then:
            - regex: native
              then:
                - sh: "sed -n 's/.*Peak RSS: \\([0-9.]*\\)GB.*/\\1/p' ${{REPO_DIR}}/logs/build-times-${{RUNTIME.name}}-${{ITERATION}}.log"
                - set-state: NATIVE_BUILD_RSS
                - script: state-array-push
                  with:
                    array: RUN.output.results.${{RUNTIME.name}}.build.native.rss
                    value: ${{NATIVE_BUILD_RSS}}
    - script: state-array-calc-avg
      with:
        var-name: RUN.output.results.${{RUNTIME.name}}.build.avBuildTime
        array: RUN.output.results.${{RUNTIME.name}}.build.timings

    - read-state: ${{TYPE}}
      then:
        - regex: native
          then:
            # Capture average native build RSS
            - script: state-array-calc-avg
              with:
                var-name: RUN.output.results.${{RUNTIME.name}}.build.avNativeRSS
                array: RUN.output.results.${{RUNTIME.name}}.build.native.rss

            # Capture the binary size (should be the same in all files, so just pick the 1st)
            - sh: "sed -n 's/^[[:space:]]*\\([0-9.]*\\)MB in total image size.*/\\1/p' ${{REPO_DIR}}/logs/build-times-${{RUNTIME.name}}-0.log"
            - set-state: RUN.output.results.${{RUNTIME.name}}.build.native.binarySize

            # Capture the number of classes
            - sh: "cat ${{REPO_DIR}}/logs/build-times-${{RUNTIME.name}}-0.log | grep \"types.*fields.*methods found reachable\" | awk '{print $1}'"
            - set-state: RUN.output.results.${{RUNTIME.name}}.build.classCount

            # Capture the number of fields
            - sh: "cat ${{REPO_DIR}}/logs/build-times-${{RUNTIME.name}}-0.log | grep \"types.*fields.*methods found reachable\" | awk '{print $3}'"
            - set-state: RUN.output.results.${{RUNTIME.name}}.build.fieldCount

            # Capture the number of methods
            - sh: "cat ${{REPO_DIR}}/logs/build-times-${{RUNTIME.name}}-0.log | grep \"types.*fields.*methods found reachable\" | awk '{print $6}'"
            - set-state: RUN.output.results.${{RUNTIME.name}}.build.methodCount

            # Capture the number of classes registered for reflection
            - sh: "cat ${{REPO_DIR}}/logs/build-times-${{RUNTIME.name}}-0.log | grep \"types.*fields.*methods registered for reflection\" | awk '{print $1}'"
            - set-state: RUN.output.results.${{RUNTIME.name}}.build.reflectionClassCount

            # Capture the number of fields registered for reflection
            - sh: "cat ${{REPO_DIR}}/logs/build-times-${{RUNTIME.name}}-0.log | grep \"types.*fields.*methods registered for reflection\" | awk '{print $3}'"
            - set-state: RUN.output.results.${{RUNTIME.name}}.build.reflectionFieldCount

            # Capture the number of methods registered for reflection
            - sh: "cat ${{REPO_DIR}}/logs/build-times-${{RUNTIME.name}}-0.log | grep \"types.*fields.*methods registered for reflection\" | awk '{print $6}'"
            - set-state: RUN.output.results.${{RUNTIME.name}}.build.reflectionMethodCount

  measure-time-to-first-request:
    - log: Measuring Time to first request
    - sh: java -version
    - sh: cd ${{RUNTIME.dir}}
    - sh: ${{RUNTIME.buildCmd}}
    - for-each: ITERATION ${{=[...Array(${{config.num_iterations}}).keys()]}}
      then:
        - script: sync-drop-fs-cache
        - sh: node ${{SCRIPTS_DIR}}/time.js "${{= "${{RUNTIME.runCmd}}".trim().replace(/  +/g, ' ') }}" ${{TARGET_URL}} | awk '{print $1}'
          then:
          - set-state:   START_TIME
        - script: state-array-push
          with:
            array: RUN.output.results.${{RUNTIME.name}}.startup.timings
            value: ${{START_TIME}}
        - sh: sleep ${{PAUSE_TIME}}
    - script: state-array-calc-avg
      with:
        var-name: RUN.output.results.${{RUNTIME.name}}.startup.avStartTime
        array: RUN.output.results.${{RUNTIME.name}}.startup.timings

  measure-rss:
    - log: Measuring RSS
    - sh: java -version
    - sh: cd ${{RUNTIME.dir}}
    - sh: ${{RUNTIME.buildCmd}}
    - for-each: ITERATION ${{=[...Array(${{config.num_iterations}}).keys()]}}
      then:
        - script: sync-drop-fs-cache
        - sh: ${{RUNTIME.runCmd}} 2>&1 >${{REPO_DIR}}/logs/measure-rss-${{RUNTIME.name}}-${{ITERATION}}.log &
        - sh: APP_PID=$!
        - log: $APP_PID
        - sh: sleep ${{PAUSE_TIME}}
        - sh: pmap -x $APP_PID | grep total | awk '{print $4}'
          then:
            - set-state: RSS_STARTUP
        - script: state-array-push
          with:
            array: RUN.output.results.${{RUNTIME.name}}.rss.startup
            value: ${{= ${{RSS_STARTUP}}/1024 }}
        - sh: curl -s  ${{TARGET_URL}} > /dev/null
        - sh: pmap -x $APP_PID | grep total | awk '{print $4}'
          then:
            - set-state: FIRST_REQUEST
        - script: state-array-push
          with:
            array: RUN.output.results.${{RUNTIME.name}}.rss.firstRequest
            value: ${{= ${{FIRST_REQUEST}}/1024 }}
        - sh: kill -15 $APP_PID
        - sh: sleep ${{PAUSE_TIME}}
    - script: state-array-calc-avg
      with:
        var-name: RUN.output.results.${{RUNTIME.name}}.rss.avStartupRss
        array: RUN.output.results.${{RUNTIME.name}}.rss.startup
    - script: state-array-calc-avg
      with:
        var-name: RUN.output.results.${{RUNTIME.name}}.rss.avFirstRequestRss
        array: RUN.output.results.${{RUNTIME.name}}.rss.firstRequest

  run-load-test:
    - log: Running workload
    - sh: cd ${{RUNTIME.dir}}
    - sh: ${{RUNTIME.buildCmd}}
    - for-each: ITERATION ${{=[...Array(${{config.num_iterations}}).keys()]}}
      then:
        - script: sync-drop-fs-cache
        - set-signal: LOAD_STEADY_STATE_START 1
        - sh: ${{RUNTIME.runCmd}} 2>&1 >${{REPO_DIR}}/logs/load-test-${{RUNTIME.name}}-${{ITERATION}}.log &
        - sh: APP_PID=$!
        - sh: echo $APP_PID
          then:
            - set-state: JVM_PID
        - read-state: ${{config.profiler.name}}
          then:
            - regex: "jfr|flamegraph"
              then:
                - script: async-profiler-install
                - script: async-profiler-configure
                - script:
                    name: async-profiler-run
                    async: true
                  with:
                    wait_start: LOAD_STEADY_STATE_START
                    pid: ${{JVM_PID}}
                    suffix: ${{ITERATION}}.html
                    format: ${{config.profiler.name}}
                    events: ${{config.profiler.events}}
                    delay: 10s
        - sh: sleep ${{PAUSE_TIME}}
        - sh: ${{RUN.WRK_BIN}} -t 16 -c 100 -d 120 ${{TARGET_URL}} 2>&1 >${{REPO_DIR}}/logs/wrk-warmup-${{RUNTIME.name}}-${{ITERATION}}.log
        - regex: unable to connect
          then:
            - abort: unable to connect to target application
        - signal: LOAD_STEADY_STATE_START
        - sh: ${{RUN.WRK_BIN}} -t 16 -c 100 -d 30 ${{TARGET_URL}} 2>&1 >${{REPO_DIR}}/logs/wrk-${{RUNTIME.name}}-${{ITERATION}}.log
        - sh: cat ${{REPO_DIR}}/logs/wrk-${{RUNTIME.name}}-${{ITERATION}}.log | grep "Requests/sec" | awk '{print $2}'
          then:
            - set-state: THROUGHPUT
        - script: state-array-push
          with:
            array: RUN.output.results.${{RUNTIME.name}}.load.throughput
            value: ${{THROUGHPUT}}
        - sh: cat ${{REPO_DIR}}/logs/wrk-${{RUNTIME.name}}-${{ITERATION}}.log | grep "Socket errors:" | sed -E 's/.*connectionErrors ([0-9]+).*/\1/'
          then:
            - regex: ^$
              then:
                - set-state: CONNECTION_ERRORS 0
              else:
                - set-state: CONNECTION_ERRORS
        - script: state-array-push
          with:
            array: RUN.output.results.${{RUNTIME.name}}.load.connectionErrors
            value: ${{CONNECTION_ERRORS}}

        - sh: cat ${{REPO_DIR}}/logs/wrk-${{RUNTIME.name}}-${{ITERATION}}.log | grep "Socket errors:" | sed -E 's/.*requestTimeouts ([0-9]+)/\1/'
          then:
            - regex: ^$
              then:
                - set-state: REQUEST_TIMEOUTS 0
              else:
                - set-state: REQUEST_TIMEOUTS
        - script: state-array-push
          with:
            array: RUN.output.results.${{RUNTIME.name}}.load.requestTimeouts
            value: ${{REQUEST_TIMEOUTS}}

        - sh: pmap -x $APP_PID | grep total | awk '{print $4}'
          then:
            - set-state: RSS
        - script: state-array-push
          with:
            array: RUN.output.results.${{RUNTIME.name}}.load.rss
            value: ${{= ${{RSS}}/1024 }}
        - script: state-array-push
          with:
            array: RUN.output.results.${{RUNTIME.name}}.load.throughputDensity
            value: ${{= ${{THROUGHPUT}}/${{RSS}}*1024 }}
        - sh: kill -15 $APP_PID
        - sh: sleep ${{PAUSE_TIME}}
    - script: state-array-calc-avg
      with:
        var-name: RUN.output.results.${{RUNTIME.name}}.load.avThroughput
        array: RUN.output.results.${{RUNTIME.name}}.load.throughput
    - script: state-array-calc-avg
      with:
        var-name: RUN.output.results.${{RUNTIME.name}}.load.avMaxRss
        array: RUN.output.results.${{RUNTIME.name}}.load.rss
    - script: state-array-calc-max
      with:
        var-name: RUN.output.results.${{RUNTIME.name}}.load.maxThroughputDensity
        array: RUN.output.results.${{RUNTIME.name}}.load.throughputDensity
    - script: state-array-calc-avg
      with:
        var-name: RUN.output.results.${{RUNTIME.name}}.load.avConnectionErrors
        array: RUN.output.results.${{RUNTIME.name}}.load.connectionErrors
    - script: state-array-calc-avg
      with:
        var-name: RUN.output.results.${{RUNTIME.name}}.load.avRequestTimeouts
        array: RUN.output.results.${{RUNTIME.name}}.load.requestTimeouts

  download-metrics:
    - sh: mkdir -p ${{METRICS_DIR}}
    - script: sudo
      with:
        command: rm -Rf ${{METRICS_DIR}}/metrics.json
    - set-state: RUN.output.config ${{RUN.config}}
    - set-state: RUN.output.env ${{RUN.env}}
    - sh: echo '${{RUN.output}}' > ${{METRICS_DIR}}/metrics.json
      then:
      - regex: .*Permission denied
        then:
        - abort: Could not output metrics. Permission denied!
    - queue-download: ${{METRICS_DIR}}/metrics.json
    - queue-download: ${{REPO_DIR}}/logs/*

hosts:
  target-host: ${{env.TARGET}}
  target-host-root: root@${{env.HOST}}

roles:
  test-cgroups:
    hosts:
      - target-host
      # - target-host-root
    setup-scripts:
      - create-cgroup:
        with:
          CGROUP_NAME: ${{config.cgroup.name}}
          CGROUP_CPUSET: ${{config.cgroup.cpu}}
          CGROUP_MAX_MEM: ${{config.cgroup.mem_max}}
    run-scripts:
      - join-cgroup:
        with:
          CGROUP_NAME: ${{config.cgroup.name}}
          SHELL_PID: ${{RUN.SHELL_PID}}
    cleanup-scripts:
      - delete-cgroup:
        with:
          CGROUP_NAME: ${{config.cgroup.name}}

  test-runner:
    hosts:
      - target-host
    setup-scripts:
#      - output-vars
      - detect-os
      - capture-os-info
      - start-timestamp
      - cleanup-env
      - config-env
      - ensure-requirements
      - clone-repo
      - stop-test-services
      - start-test-services
    run-scripts:
      - run-tests
    cleanup-scripts:
      - stop-timestamp
      - download-metrics
      - stop-test-services
#      - cleanup-env
      # - remove-installed-packages
